syntax = "proto3";

package record;


import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "paginate.proto";
import "lottery.proto";

option go_package = "record.v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  schemes: HTTPS;
  host: "yyuck.com";
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "https://example.com/oauth/authorize";
        token_url: "https://example.com/oauth/token";
        scopes: {
          scope: {
            key: "login";
          }
        }
      }
    }
  }
};

service RecordService {
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/record.RecordService/records"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "login";
          }
        }
      }
    };
  }
  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get: "/record.RecordService/records/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "login";
          }
        }
      }
    };
  }
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/record.RecordService/records",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "login";
          }
        }
      }
    };
  }
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      patch: "/record.RecordService/records/{id}",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "login";
          }
        }
      }
    };
  }
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/record.RecordService/records/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "login";
          }
        }
      }
    };
  }
}

// Lottery item
message RecordRemark {
  int32 id = 1; // id
  int32 record_id = 2;
  int32 remark_id = 3; // id
  string value = 4; // lottery image
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

// Lottery item
message NewRecordRemark {
  int32 record_id = 1;
  int32 remark_id = 2; // id
  string value = 3; // lottery image
}

// Lottery item
message RecordInfo {
  int32 id = 1; // id
  int32 lottery_id = 2; // id
  string user_id = 3; // id
  int32 item_id = 4; // id
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}
message Record {
  RecordInfo record = 1;
  lottery.Lottery lottery = 2;
  repeated RecordRemark record_remarks = 3;
}

message RecordQuery {
  optional int32 id = 1; // id
  optional int32 lottery_id = 2; // id
  optional string user_id = 3; // id
}

message NewRecordInfo {
  int32 lottery_id = 1; // id
  string user_id = 2; // id
  int32 item_id = 3; // id
}
message NewRecord {
  NewRecordInfo record = 1; // id
  repeated NewRecordRemark record_remarks = 2;
}

message ListRequest {
  RecordQuery record = 1;
  paginate.Paginate paginate = 2;
}

message ListResponse {
  repeated Record records = 1;
  paginate.Paginated paginated = 2;
}

message GetRequest {
  int32 id = 1;
}
message GetResponse {
  Record record = 1;
}

message CreateRequest {
  NewRecord record = 1;
}
message CreateResponse {
  Record record = 1;
}

message UpdateRequest {
  int32 id = 1;
  NewRecord record = 2;
}
message UpdateResponse {
  Record record = 1;
}

message DeleteRequest {
  int32 id = 1;
}
message DeleteResponse {
}
